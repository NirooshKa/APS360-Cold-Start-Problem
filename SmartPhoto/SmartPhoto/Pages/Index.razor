@page "/"
@inject NavigationManager uriHelper
@inject QuoteService quote
<!--Title-->
<h1 class="text-center">Smart Photo</h1>

<!--Section-->
<h3 class="text-center">Start</h3>

<!--Usage Instruction-->
@if (!Directory.Exists(workPath) || process != null)
{
    <p class="text-center">Select a photo to start detecting objects in it.</p>
}
else
{
    <p class="text-center"><strong>Someone is working with this site right now!</strong> Due to limited processing resource. Only one person can use this app at a time. Please come back later!</p>
}

<!--Image Upload Control-->
@if (process == null)
{
    @if (file != null)
    {
        if (file.Type == "image/jpeg" || file.Type == "image/png")
        {
            <div>
                <p>Name: @file.Name</p>
                <p>Size in bytes: @file.Size</p>
                <p>Last modified date: @file.LastModified.ToShortDateString()</p>
                <p>Content type: @file.Type</p>
                <BSButton Color="Color.Success" @onclick="Save">Upload</BSButton>
            </div>
        }
        else
        {
            <div>
                <p>Name: @file.Name</p>
                <p>Size in bytes: @file.Size</p>
                <p>Last modified date: @file.LastModified.ToShortDateString()</p>
                <p>Content type: @file.Type</p>
                <p><strong>Wrong file type. Accepts only <code>image/png</code> or <code>image/jpg</code>.</strong></p>
            </div>
        }
    }

    if (!Directory.Exists(workPath))
    {
        <div class="drag-drop-zone">
            <BlazorInputFile.InputFile OnChange="HandleFileSelected" />
            @status
        </div>
    }
}
else
{
    <!--Process Output Log-->
    <pre style="white-space: pre-wrap;">
        @process
    </pre>
}

<!--Items Cards-->
@if (items != null)
{
    foreach (var item in items)
    {
        @if (records.ContainsKey(item.Name))
        {
            <BSCard Color="Color.Dark" Class="m-2">
                <BSCard CardType="CardType.Header">@records[item.Name].Type</BSCard>
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">@item.Name</BSCard>
                    <BSCard CardType="CardType.Text">
                        <div class="clearfix">
                            <img class="img-fluid float-left mr-2" style="max-height: 200px;" src="temp/@Path.GetFileName(item.FilePath)" />
                            @records[item.Name].Summary
                        </div>
                    </BSCard>
                </BSCard>
            </BSCard>
        }
        else
        {
            <BSCard Color="Color.Dark" Class="m-2">
                <BSCard CardType="CardType.Header">General</BSCard>
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Title">@item.Name</BSCard>
                    <BSCard CardType="CardType.Text">
                        <div class="clearfix">
                            <img class="img-fluid float-left mr-2" style="max-height: 200px;" src="temp/@Path.GetFileName(item.FilePath)" />
                            <p>@item.Name is detected (but we don't have a dictionary item for it). </p>
                        </div>
                    </BSCard>
                </BSCard>
            </BSCard>
        }
    }

    @*
    <p>Debug for items: </p>
    <ul>
        @foreach (var item in items)
        {
            <li>@item.Name: @item.FilePath</li>
        }
    </ul>
    <p></p>
    <ul>
        @foreach (var item in records)
        {
            <li>@item.Key: @item.Value.Type, @item.Value.Species, @item.Value.Summary</li>
        }
    </ul>
    *@

    <BSButton Color="Color.Primary" @onclick="() => uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true)">Do It Again!</BSButton>
}

@code {
    const string DefaultStatus = "Drop an image file here to view it, or click to choose a file";
    IFileListEntry file;
    string status = DefaultStatus;
    string process = null;
    string TaskItem = null;
    string rootPath = null;
    string workPath = null;
    (string FilePath, string Name)[] items = null;
    Dictionary<string, Kind> records = null;

    void HandleFileSelected(IFileListEntry[] files)
    {
        // Do something with the files, e.g., read them
        file = files.FirstOrDefault();
    }

    protected override async Task OnInitializedAsync()
    {
        rootPath = Path.GetDirectoryName(Directory.GetCurrentDirectory());
        workPath = Path.Combine(rootPath, "work");

        // Get a quote
        using var client = new HttpClient();
        var result = await client.GetAsync("https://quotes.rest/qod?language=en");
        if (result.IsSuccessStatusCode)
        {
            string content = await result.Content.ReadAsStringAsync();
            quote.Quote = System.Text.RegularExpressions.Regex.Match(content, "\"quote\": \"(.*)?\"").Groups[1].Value;
            quote.Author = System.Text.RegularExpressions.Regex.Match(content, "\"author\": \"(.*)?\"").Groups[1].Value;
        }
    }

    async Task Save()
    {
        using (System.IO.MemoryStream memory = new System.IO.MemoryStream())
        {
            await file.Data.CopyToAsync(memory);
            if (!Directory.Exists(workPath))
                Directory.CreateDirectory(workPath);
            Directory.GetFiles(workPath).ToList().ForEach(f => File.Delete(f));
            TaskItem = System.IO.Path.Combine(workPath, $"work.png");
            // Read as Bitmap
            memory.Seek(0, System.IO.SeekOrigin.Begin);
            System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(memory);
            bitmap.Save(TaskItem, System.Drawing.Imaging.ImageFormat.Png);
        }
        process = "Start processing (This may take a LONG while)...";
        if (quote != null && quote.Quote != null)
            process += $" In the mean time, did you know that: \"{quote.Quote}\" - {quote.Author}";
        StateHasChanged();
        // Perform Object Detection
        bool result = await YoloStage();
        StateHasChanged();
        // Continue Species Identification
        if (result)
        {
            // Move work files to appropriate places
            TextInfo TI = new CultureInfo("en-US", false).TextInfo;
            // Get files
            items = Directory.GetFiles(workPath)
                .Where(f => !Path.GetFileName(f).ToLower().StartsWith("work"))
                .Select(f =>
                {
                    string filePath = f;
                    string name = TI.ToTitleCase(Path.GetFileNameWithoutExtension(f));  // Normalize Display
                    name = name.Substring(0, name.LastIndexOf('_')); // Remove numerical index
                    return (FilePath: filePath, Name: name);
                }).ToArray();
            // Copy files into wwwroot
            string tempFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "temp");
            if (Directory.Exists(tempFolder))
                Directory.Delete(tempFolder, true);
            Directory.CreateDirectory(tempFolder);
            items.ToList().ForEach(f =>
            {
                string newPath = Path.Combine(tempFolder, Path.GetFileName(f.FilePath));
                File.Copy(f.FilePath, newPath);
            });
            // Update dictionary
            if (result)
            {
                // Get dictionary
                string csvFile = Path.Combine(rootPath, "dataset.csv");
                var conf = new CsvHelper.Configuration.CsvConfiguration(CultureInfo.InvariantCulture);
                using (var reader = new StreamReader(csvFile))
                using (var csv = new CsvHelper.CsvReader(reader, conf))
                {
                    records = csv.GetRecords<Kind>().ToDictionary(i => i.Species, i => i);
                }
            }
            process += $"\nStage 1 complete.";
            process += $"\nStarting stage 2...";
            StateHasChanged();

            // Perform further identifications
            string[] yoloObjects = new string[] { "cat", "dog", "horse", "flower", "pottedplant" };
            Dictionary<string, string> annSubjects = new Dictionary<string, string>()
            {
                { "cat", "cats_and_dogs" }, // "cats" weight is not ready yet, use cats_and_dogs for now
                { "dog", "cats_and_dogs" },
                { "horse", "horses" },
                { "flower", "flowers" },
                { "pottedplant", "flowers"}
            };
            for (int i = 0; i < items.Length; i++)
            {
                var item = items[i];
                if (yoloObjects.Contains(item.Name.ToLower()))
                {
                    string identification = await ANNStage(annSubjects[item.Name.ToLower()], item.FilePath);
                    if (identification != null)
                    {
                        items[i].Name = identification;
                    }
                }
            }
            process += $"\nStage 2 complete.";
        }
        process += $"\nAll stages are complete.";
        StateHasChanged();
        // Delete holding
        Directory.Delete(workPath, true);
    }

    async Task<bool> YoloStage()
    {
        if (TaskItem != null)
        {
            RunConfiguration configuration = new YamlDotNet.Serialization.Deserializer().Deserialize<RunConfiguration>(File.ReadAllText(Path.Combine(rootPath, "ServerConfigurations.yaml")));
            string scriptPath = System.IO.Path.Combine(rootPath, "yolostage.py");
            if (!System.IO.File.Exists(scriptPath))
            {
                process += "\n" + $"Couldn't locate yolostage.py. Current environment path is: {System.IO.Directory.GetCurrentDirectory()}, expect yolostage.py at: {scriptPath}";
                return false;
            }
            var command = Medallion.Shell.Command.Run(configuration.PythonPath, configuration.PythonCommands, options =>
            {
                options.WorkingDirectory(rootPath);
                options.StartInfo(si => { si.UseShellExecute = false; si.RedirectStandardInput = si.RedirectStandardOutput = si.RedirectStandardError = true; });
            });  // Example: Medallion.Shell.Command.Run("python3", scriptPath, TaskItem);
            var result = await command.Task;
            // inspect the result
            if (!result.Success)
            {
                process += "\n" + $"command failed with exit code {result.ExitCode}: {result.StandardError}";
                return false;
            }
            else
            {
                process += "\n" + result.StandardOutput.Replace(System.IO.Directory.GetCurrentDirectory(), "Current Workding Directory" + System.IO.Path.PathSeparator).TrimEnd();
                return true;
            }
        }
        return false;
    }

    async Task<string> ANNStage(string subject, string imagePath)
    {
        if (TaskItem != null)
        {
            RunConfiguration configuration = new YamlDotNet.Serialization.Deserializer().Deserialize<RunConfiguration>(File.ReadAllText(Path.Combine(rootPath, "ServerConfigurations.yaml")));
            string scriptPath = System.IO.Path.Combine(rootPath, "annstage.py");
            if (!System.IO.File.Exists(scriptPath))
            {
                process += "\n" + $"Couldn't locate annstage.py. Current environment path is: {System.IO.Directory.GetCurrentDirectory()}, expect annstage.py at: {scriptPath}";
                return null;
            }
            var command = Medallion.Shell.Command.Run(configuration.PythonPath, new string[] { scriptPath, subject, imagePath }, options =>
            {
                options.WorkingDirectory(rootPath);
                options.StartInfo(si => { si.UseShellExecute = false; si.RedirectStandardInput = si.RedirectStandardOutput = si.RedirectStandardError = true; });
            });  // Example: Medallion.Shell.Command.Run("python3", annstage.py, "cats", "work/cat.jpg");
            var result = await command.Task;
            // inspect the result
            if (!result.Success)
            {
                process += "\n" + $"command failed with exit code {result.ExitCode}: {result.StandardError}";
                return null;
            }
            else
            {
                process += "\n" + result.StandardOutput.Trim();
                return result.StandardOutput.Trim();
            }
        }
        return null;
    }
}